#!/usr/bin/env bash
export DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)"
export PDIR="$(dirname $DIR)"
export TDIR="${PDIR}/tools"

appendBashPath() {
    BU_PATH=$HOME/.bashrc
    backupFile "$BU_PATH"
    newPath="export PATH=$1:\$PATH"
    bash -c "grep -q -F '$newPath' $BU_PATH || echo '$newPath' >> $BU_PATH"
    source $BU_PATH 2>/dev/null
}

appendZshPath() {
    BU_PATH=$HOME/.zshrc
    backupFile "$BU_PATH"
    newPath="export PATH=$1:\$PATH"
    bash -c "grep -q -F '$newPath' $BU_PATH || echo '$newPath' >> $BU_PATH"
    source $BU_PATH 2>/dev/null
}

backupFile() {
    if [ ! -f $1.ORIGINAL ]; then
        cp $1 $1.ORIGINAL
    fi
}

installChrome() {
    sudo apt-get install -y gdebi-core
    rm -f /tmp/google-chrome-stable_current_amd64.deb /tmp/chrome.deb 
    curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o /tmp/chrome.deb
    sudo dpkg -i /tmp/chrome.deb
    rm -f /tmp/chrome.deb
    sudo apt --fix-broken install -y
    cd $DIR
}

installDocker() {
    rm -f /tmp/docker-compose
    sudo apt-get install -y curl
    printf '%s\n' "deb https://download.docker.com/linux/debian bullseye stable" |
    sudo tee /etc/apt/sources.list.d/docker-ce.list
    curl -fsSL https://download.docker.com/linux/debian/gpg |
    sudo gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/docker-ce-archive-keyring.gpg
    sudo apt update
    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    sudo usermod -aG docker $USER
    newgrp docker
    sudo docker run hello-world
    sudo systemctl stop docker
    sudo systemctl enable docker
    sudo systemctl start docker
    url=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep docker-compose-linux-x86_64 | cut -d '"' -f 4 | grep -v "sha")
    curl $url -o /tmp/docker-compose
    chmod +x /tmp/docker-compose 
    sudo mv /tmp/docker-compose /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    docker-compose version
}

installGhidra() {
    export GDIR="${TDIR}/ghidra"
    export URL=https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.2.2_build/ghidra_10.2.2_PUBLIC_20221115.zip
    #rm -fr /tmp/ghidra* ${GDIR}
    #cd /tmp
    #rm -f /tmp/ghidra*
   # curl $URL -o /tmp/ghidra.zip
    #unzip /tmp/ghidra*.zip 
    #rm -fr /tmp/ghidra*.zip
    #mkdir -p ${GDIR}
    #mv /tmp/ghidra* "${GDIR}/ghidra"
    #rm -fr /tmp/ghidra* 
    #cd "$GDIR"
    #cp -r ./ghidra/* ./
    #rm -fr ./ghidra
    appendBashPath "${GDIR}"
    appendZshPath "${GDIR}"
}

installJava() {
    sudo apt-get install -y default-jdk
}

installMisc() {
    sudo apt-get install -y gobuster libimage-exiftool-perl poppler-utils tree
}

installPython() {
    pip install -y Flask
}

installVsCode() {
    rm -fr /tmp/microsoft.asc /tmp/packages.microsoft.gpg
    sudo apt --fix-broken install -y
    sudo apt-get install -y gdebi-core gpg 
    curl https://packages.microsoft.com/keys/microsoft.asc -o /tmp/microsoft.asc
    cat /tmp/microsoft.asc | gpg --dearmor > /tmp/packages.microsoft.gpg
    sudo install -D -o root -g root -m 644 /tmp/packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
    sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
    sudo apt install -y apt-transport-https
    sudo apt update
    sudo apt install -y code
    rm -fr /tmp/microsoft.asc /tmp/packages.microsoft.gpg
}

installVim() {
    sudo apt-get install -y vim 
    cat << EOL > /tmp/VIMRC
filetype plugin indent off
set tabstop=4
set shiftwidth=4
set expandtab
set vb t_vb=
syntax on
colorscheme default 
autocmd FileType make setlocal ts=4 sts=4 sw=4 noexpandtab
autocmd FileType c setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType cpp setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType html setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType java setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType json setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType php setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType c,cpp,html,java,javascript,json,php,python,yaml autocmd BufWritePre <buffer> %s/\s\+$//e
EOL
    mv /tmp/VIMRC ~/.vimrc
}

setupGit() {
    git config --global user.name "$1" 
    git config --global user.email "<>"
    git config --global core.editor vim 
}

setupSsh() {
    path=~/.ssh/id_ed25519
    if [[ -f "$path" ]]; then
	echo "SSH keys already exist. Ignoring setup."
        return
    fi
    echo -n "Enter a passphrase for SSH:  "
    read -s passphrase 
    ssh-keygen -t ed25519 -f "$path" -C "$1" -N "$2" <<< $'\ny'
    chmod 700 ~/.ssh
    chmod 644 ~/.ssh/id_ed25519.pub
    chmod 600 ~/.ssh/id_ed25519
    ls -al ~/.ssh
    echo -e "\nHere is your public key:\n"
    cat ~/.ssh/id_ed25519.pub
}

updateOs() {
    sudo apt-get update
}

echo -n "Your full name: "
read name
echo -n "Your e-mail: "
read email
setupSsh "$email" "$passphrase"
updateOs
setupGit "$name" "$email"
installVim
installChrome
installVsCode
installDocker
installPython
installGhidra
installMisc
echo "Please reboot system"
